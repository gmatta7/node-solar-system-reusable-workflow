name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:

        services:
          mongo-db:
            image: ${{ vars.MONGO_IMAGE_NON_PROD }}
            ports:
              - 27017:27017

        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: ${{ vars.MONGO_USERNAME_NONPROD }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD_NONPROD }}

        strategy:
          matrix:
            nodejs_version: [20, 18]
            operating_system: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest

        name: Unit Testing
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: code coverage
      container: 
        image: node:18
      services:
        mongo-db:
          image: ${{ vars.MONGO_IMAGE_NON_PROD }}
          options: 
            --name mongo
      env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: ${{ vars.MONGO_USERNAME_NONPROD }}
        MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD_NONPROD }}
      runs-on: ubuntu-latest
      steps:
        - name: checkout repo
          uses: actions/checkout@v4

        # - name: Setup NodeJS version 18
        #   uses: actions/setup-node@v3

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install dependencies
          run: npm install

        - name: Run code coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive coverage report
          uses: actions/upload-artifact@v3
          with:
            name: Code-coverage-report
            path: coverage
            retention-days: 2

    docker:
      name: containerization
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ${{ vars.GHCR_URI }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build for testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=${{ vars.MONGO_URI }} \
            -e MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            -e MONGO_PASSWORD=${{ vars.MONGO_PASSWORD }} \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{ range .NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ${{ vars.GHCR_URI }}/${{github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deployment:
      name: Dev deployment

      needs: [docker]

      if: contains(github.ref, 'feature/')

      uses: ./.github/workflows/reusable-deployment-workflow.yml

      secrets: 
        K8S-KUBECONFIG: ${{ secrets.KUBECONFIG }}
        MONGO-DB-PASSWORD: ${{ secrets.MONGO_PASSWORD }}

      with:
        MONGO_URI: ${{ vars.MONGO_URI }}
        KUBECTL_VERSION: v1.27.9
        ENVIRONMENT: development
        K8S_MANIFEST_DIR: kubernetes


    dev-integration-test:
      name: Dev Integration Testing

      needs: [dev-deployment]

      runs-on: ubuntu-latest

      if: contains(github.ref, 'feature/')

      steps:
        - name: Test URL response using CURL and JQ
          env:
            URL: ${{ needs.dev-deployment.outputs.APPLICATION_URI }}
          run: |
            echo $URL
            echo "----------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

    prd-deployment:
      name: Prd deployment

      needs: [docker]

      if: github.ref == 'refs/heads/main'

      uses: ./.github/workflows/reusable-deployment-workflow.yml

      secrets: 
        K8S-KUBECONFIG: ${{ secrets.KUBECONFIG }}
        MONGO-DB-PASSWORD: ${{ secrets.MONGO_PASSWORD }}

      with:
        MONGO_URI: ${{ vars.MONGO_URI }}
        KUBECTL_VERSION: v1.27.9
        ENVIRONMENT: production
        K8S_MANIFEST_DIR: kubernetes

    prd-integration-test:
      name: Prd Integration Testing

      needs: [prd-deployment]

      runs-on: ubuntu-latest

      if: github.ref == 'refs/heads/main'

      steps:
        - name: Test URL response using CURL and JQ
          env:
            URL: ${{ needs.dev-deployment.outputs.APPLICATION_URI }}
          run: |
            echo $URL
            echo "----------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

